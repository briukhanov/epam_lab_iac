## create aws mysql rds instance
resource "aws_db_instance" "database_instance" {
  allocated_storage      = var.db_allocated_storage
  storage_type           = var.db_storage_type
  engine                 = var.db_engine
  engine_version         = var.db_engine_version
  instance_class         = var.db_instance_class
  port                   = var.db_port
  vpc_security_group_ids = ["${aws_security_group.db_security_group.id}"]
  db_subnet_group_name   = aws_db_subnet_group.database_subnet_group.name
  name                   = var.db_name
  identifier             = var.db_identifier
  username               = var.db_username
  password               = var.db_password
  parameter_group_name   = var.db_parameter_group_name
  skip_final_snapshot    = true
  tags = {
    Name = "${(var.cluster_name)}_database_instance"
  }
}

resource "local_file" "tf_ansible_vars_file_new" {
  content  = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.
    ---
    mysql_db_name: ${var.db_name}
    mysql_user: ${var.db_username}
    mysql_user_password: ${var.db_password}
    mysql_server_address: ${aws_db_instance.database_instance.address}
    nginx_http_host: ${var.nginx_http_host}
    nginx_http_conf: ${var.nginx_http_conf}
    nginx_http_port: ${var.nginx_http_port}
    DOC
  filename = "all.yml"
  depends_on = [
    aws_db_instance.database_instance
  ]
}



## create EC2 instance
resource "aws_instance" "web_instance" {
  ami                    = lookup(var.images, var.aws_region)
  instance_type          = var.instance_type
  key_name               = var.instance_access_private_key
  vpc_security_group_ids = ["${aws_security_group.web_security_group.id}"]
  subnet_id              = aws_subnet.public_subnet.id
  tags = {
    Name = "${(var.cluster_name)}_web_instance"
  }
  volume_tags = {
    Name = "${(var.cluster_name)}_web_instance_volume"
  }
  provisioner "file" { #copy  file form local to remote
    source      = "all.yml"
    destination = "/tmp/all.yml"
  }
  provisioner "remote-exec" {
    inline = [
      "sudo apt -y update",
      "sudo apt -y aptitude",
      "sudo apt -y install ansible",
      "sudo ansible --version",
      "cd ~",
      "[ -d '~/epam_lab_iac' ] && rm -rf ~/epam_lab_iac",
      "git clone https://github.com/briukhanov/epam_lab_iac.git",
      "[ ! -d '~/epam_lab_iac/ansible/group_vars' ] && mkdir ~/epam_lab_iac/ansible/group_vars",
      "mv /tmp/all.yml ~/epam_lab_iac/ansible/group_vars/all.yml",
      "cd epam_lab_iac/ansible",
      "sudo ansible-playbook site.yml",
    ]
  }
  connection {
    type        = "ssh"
    user        = "ubuntu"
    password    = ""
    host        = self.public_ip
    private_key = file("${var.private_key_ec2}")
  }
  depends_on = [
    local_file.tf_ansible_vars_file_new
  ]

}
